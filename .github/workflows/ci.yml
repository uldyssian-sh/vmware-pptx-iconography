name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Validate repository structure
      run: |
        echo "Validating directory structure..."
        test -d icons || (echo "Missing icons directory" && exit 1)
        test -d templates || (echo "Missing templates directory" && exit 1)
        test -d docs || (echo "Missing docs directory" && exit 1)
        test -d examples || (echo "Missing examples directory" && exit 1)
        echo "✅ Directory structure valid"
        
    - name: Check documentation
      run: |
        echo "Checking documentation files..."
        test -f README.md || (echo "Missing README.md" && exit 1)
        test -f docs/installation.md || (echo "Missing installation guide" && exit 1)
        test -f docs/usage-guide.md || (echo "Missing usage guide" && exit 1)
        echo "✅ Documentation files present"
        
    - name: Validate icon structure
      run: |
        echo "Validating icon categories..."
        for category in compute networking storage cloud management; do
          test -d "icons/$category" || (echo "Missing icons/$category directory" && exit 1)
        done
        echo "✅ Icon categories valid"
        
    - name: Run linting
      run: |
        echo "Running code quality checks..."
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        echo "✅ Linting completed"
        
    - name: Test Python utilities
      run: |
        echo "Testing Python utilities..."
        python -c "import sys; print(f'Python {sys.version}')"
        python -c "from PIL import Image; print('Pillow available')" || echo "Pillow not available"
        echo "✅ Python environment validated"

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Run security scan
      run: |
        echo "Running security checks..."
        # Check for sensitive files
        if find . -name "*.key" -o -name "*.pem" -o -name "*.p12" | grep -q .; then
          echo "❌ Found potential sensitive files"
          exit 1
        fi
        echo "✅ No sensitive files found"
        
    - name: Validate file permissions
      run: |
        echo "Checking file permissions..."
        find . -type f -executable | grep -v ".git" | grep -v "node_modules" || echo "No unexpected executable files"
        echo "✅ File permissions validated"

  build:
    runs-on: ubuntu-latest
    needs: [validate, security]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Build documentation
      run: |
        echo "Building documentation..."
        mkdir -p build/docs
        cp -r docs/* build/docs/ 2>/dev/null || echo "No docs to copy"
        cp README.md build/docs/ 2>/dev/null || echo "No README to copy"
        echo "✅ Documentation built"
        
    - name: Package icons
      run: |
        echo "Packaging icons..."
        mkdir -p build/packages
        if [ -d icons ] && [ "$(ls -A icons)" ]; then
          tar -czf build/packages/vmware-icons.tar.gz icons/
          echo "✅ Icons packaged"
        else
          echo "ℹ️ No icons to package"
        fi
        
    - name: Package templates
      run: |
        echo "Packaging templates..."
        if [ -d templates ] && [ "$(ls -A templates)" ]; then
          tar -czf build/packages/vmware-templates.tar.gz templates/
          echo "✅ Templates packaged"
        else
          echo "ℹ️ No templates to package"
        fi
        
    - name: Generate manifest
      run: |
        echo "Generating build manifest..."
        cat > build/manifest.json << EOF
        {
          "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "repository": "${{ github.repository }}",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "packages": [
            "vmware-icons.tar.gz",
            "vmware-templates.tar.gz"
          ]
        }
        EOF
        echo "✅ Manifest generated"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vmware-pptx-iconography-build
        path: build/
        retention-days: 30